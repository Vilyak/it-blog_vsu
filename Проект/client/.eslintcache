[{"D:\\Шарага\\Курсачи\\Blog\\client\\src\\reportWebVitals.js":"1","D:\\Шарага\\Курсачи\\Blog\\client\\src\\App.tsx":"2","D:\\Шарага\\Курсачи\\Blog\\client\\src\\components\\Blog.tsx":"3","D:\\Шарага\\Курсачи\\Blog\\client\\src\\components\\Sidebar.js":"4","D:\\Шарага\\Курсачи\\Blog\\client\\src\\components\\MainFeaturedPost.tsx":"5","D:\\Шарага\\Курсачи\\Blog\\client\\src\\components\\Main.tsx":"6","D:\\Шарага\\Курсачи\\Blog\\client\\src\\components\\Header.tsx":"7","D:\\Шарага\\Курсачи\\Blog\\client\\src\\components\\FeaturedPost.tsx":"8","D:\\Шарага\\Курсачи\\Blog\\client\\src\\components\\Footer.tsx":"9","D:\\Шарага\\Курсачи\\Blog\\client\\src\\components\\Markdown.tsx":"10","D:\\Шарага\\Курсачи\\Blog\\client\\src\\index.tsx":"11","D:\\Шарага\\Курсачи\\Blog\\client\\src\\redux.ts":"12","D:\\Шарага\\Курсачи\\Blog\\client\\src\\sagas.ts":"13","D:\\Шарага\\Курсачи\\Blog\\client\\src\\reducer.ts":"14","D:\\Шарага\\Курсачи\\Blog\\client\\src\\actions.ts":"15","D:\\Шарага\\Курсачи\\Blog\\client\\src\\api.ts":"16","D:\\Шарага\\Курсачи\\Blog\\client\\src\\utils.ts":"17","D:\\Шарага\\Курсачи\\Blog\\client\\src\\urls.ts":"18","D:\\Шарага\\Курсачи\\Blog\\client\\src\\config.ts":"19","D:\\Шарага\\Курсачи\\Blog\\client\\src\\components\\Login.tsx":"20","D:\\Шарага\\Курсачи\\Blog\\client\\src\\components\\AdminPanel.js":"21","D:\\Шарага\\Курсачи\\Blog\\client\\src\\types.ts":"22","D:\\Шарага\\Курсачи\\Blog\\client\\src\\components\\PostsEditorForm.tsx":"23","D:\\Шарага\\Курсачи\\Blog\\client\\src\\components\\PostViewer.tsx":"24"},{"size":362,"mtime":499162500000,"results":"25","hashOfConfig":"26"},{"size":356,"mtime":1612021024527,"results":"27","hashOfConfig":"26"},{"size":3151,"mtime":1612200036500,"results":"28","hashOfConfig":"26"},{"size":1530,"mtime":1612199201797,"results":"29","hashOfConfig":"26"},{"size":2378,"mtime":1612196943469,"results":"30","hashOfConfig":"26"},{"size":878,"mtime":1612193184062,"results":"31","hashOfConfig":"26"},{"size":2862,"mtime":1612194820238,"results":"32","hashOfConfig":"26"},{"size":2035,"mtime":1612193818985,"results":"33","hashOfConfig":"26"},{"size":1217,"mtime":1612198197492,"results":"34","hashOfConfig":"26"},{"size":968,"mtime":1611766362959,"results":"35","hashOfConfig":"26"},{"size":400,"mtime":1612030065640,"results":"36","hashOfConfig":"26"},{"size":379,"mtime":1612004968411,"results":"37","hashOfConfig":"26"},{"size":2443,"mtime":1612188133848,"results":"38","hashOfConfig":"26"},{"size":2352,"mtime":1612193750817,"results":"39","hashOfConfig":"26"},{"size":1544,"mtime":1612193750721,"results":"40","hashOfConfig":"26"},{"size":1209,"mtime":1612187789502,"results":"41","hashOfConfig":"26"},{"size":994,"mtime":1612193429526,"results":"42","hashOfConfig":"26"},{"size":280,"mtime":1612187775471,"results":"43","hashOfConfig":"26"},{"size":53,"mtime":1612273083847,"results":"44","hashOfConfig":"26"},{"size":7461,"mtime":1612031797997,"results":"45","hashOfConfig":"26"},{"size":6433,"mtime":1612181928844,"results":"46","hashOfConfig":"26"},{"size":1257,"mtime":1612193607013,"results":"47","hashOfConfig":"26"},{"size":3825,"mtime":1612193765076,"results":"48","hashOfConfig":"26"},{"size":1511,"mtime":1612194700084,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"1a51qzj",{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"56"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"56"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"56"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"52"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"56"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"56"},"D:\\Шарага\\Курсачи\\Blog\\client\\src\\reportWebVitals.js",[],["111","112"],"D:\\Шарага\\Курсачи\\Blog\\client\\src\\App.tsx",["113"],"import './App.css';\nimport Blog from \"./components/Blog\";\nimport {useDispatch} from \"react-redux\";\nimport React, {useEffect} from \"react\";\nimport {init} from \"./actions\";\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(init.request());\n  },[dispatch, init.request])\n\n  return (\n    <Blog/>\n  );\n}\n\nexport default App;\n",["114","115"],"D:\\Шарага\\Курсачи\\Blog\\client\\src\\components\\Blog.tsx",["116"],"import { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport Header from './Header';\nimport MainFeaturedPost from './MainFeaturedPost';\nimport FeaturedPost from './FeaturedPost';\nimport Main from './Main';\nimport Sidebar from './Sidebar';\nimport Footer from './Footer';\nimport 'react-awesome-slider/dist/styles.css';\nimport {BlogStore, FilteredPosts, Post} from '../types';\nimport {useSelector} from \"react-redux\";\nimport React, {useCallback, useMemo, useState} from \"react\";\nimport {getFilteredPosts} from \"../utils\";\nimport Login from \"./Login\";\nimport {AdminPanel} from \"./AdminPanel\";\nimport PostViewer from \"./PostViewer\";\n\nconst useStyles = makeStyles((theme) => ({\n  mainGrid: {\n    marginTop: theme.spacing(3),\n  },\n}));\n\nconst sidebar = {\n  title: 'О сайте',\n  description: 'Блог о самых интересных новостях в мире IT',\n  archives: [],\n  social: [\n    { name: 'GitHub', icon: GitHubIcon, link: \"https://github.com/Vilyak\"},\n    { name: 'VK', icon: GitHubIcon , link: \"https://vk.com/vilyakk\"},\n  ],\n};\n\nexport default function Blog() {\n  const classes = useStyles();\n  const {posts, categories, isOpenAdminPanel, isAuthed, openPostState} = useSelector((store: BlogStore) => store);\n  const {currentPost, isOpenPost} = openPostState;\n  const [category, setCategory] = useState<string>(\"None\");\n\n  const postsData: FilteredPosts = useMemo(() => {\n    if (category === \"None\"){\n      return getFilteredPosts(posts);\n    }\n    else {\n      return getFilteredPosts(posts.filter(x => x.category === category));\n    }\n  }, [posts, category])\n\n  const handlerClickOnCategory = useCallback((categoryName: string) => {\n    setCategory(category === categoryName ? \"None\" : categoryName);\n  }, [category, setCategory]);\n\n  return (\n    <>\n      <CssBaseline />\n      <Container maxWidth=\"lg\">\n        <Header title=\"IT Блог\" sections={categories} onClickCategory={handlerClickOnCategory}/>\n        {\n          !(isOpenAdminPanel && isAuthed) ?\n\n\n              !isOpenPost ?\n              <main>\n            {postsData.mainFeaturedPost ? <MainFeaturedPost post={postsData.mainFeaturedPost} /> : null}\n            <Grid container spacing={4}>\n              {postsData.featuredPosts.map((post) => (\n                  <FeaturedPost key={post.title} post={post} />\n              ))}\n            </Grid>\n            <Grid container spacing={5} className={classes.mainGrid}>\n              <Main title=\"Другие статьи\" posts={postsData.posts} />\n              <Sidebar\n                  title={sidebar.title}\n                  description={sidebar.description}\n                  archives={sidebar.archives}\n                  social={sidebar.social}\n              />\n            </Grid>\n          </main> : <PostViewer post={currentPost}/>\n              : <AdminPanel/>\n        }\n      </Container>\n      <Footer title=\"IT БЛОГ\" description=\"Author DMITRY VELICHKO\" />\n      <Login/>\n    </>\n  );\n}\n","D:\\Шарага\\Курсачи\\Blog\\client\\src\\components\\Sidebar.js",["117"],"import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\n\nconst useStyles = makeStyles((theme) => ({\n  sidebarAboutBox: {\n    padding: theme.spacing(2),\n    backgroundColor: theme.palette.grey[200],\n  },\n  sidebarSection: {\n    marginTop: theme.spacing(3),\n  },\n}));\n\nexport default function Sidebar(props) {\n  const classes = useStyles();\n  const { archives, description, social, title } = props;\n\n  return (\n    <Grid item xs={12} md={4}>\n      <Paper elevation={0} className={classes.sidebarAboutBox}>\n        <Typography variant=\"h6\" gutterBottom>\n          {title}\n        </Typography>\n        <Typography>{description}</Typography>\n      </Paper>\n      <Typography variant=\"h6\" gutterBottom className={classes.sidebarSection}>\n        Social\n      </Typography>\n      {social.map((network) => (\n        <Link display=\"block\" variant=\"body1\" href={network.link} key={network}>\n          <Grid container direction=\"row\" spacing={1} alignItems=\"center\">\n            <Grid item>\n              <network.icon />\n            </Grid>\n            <Grid item>{network.name}</Grid>\n          </Grid>\n        </Link>\n      ))}\n    </Grid>\n  );\n}\n\nSidebar.propTypes = {\n  archives: PropTypes.array,\n  description: PropTypes.string,\n  social: PropTypes.array,\n  title: PropTypes.string,\n};\n","D:\\Шарага\\Курсачи\\Blog\\client\\src\\components\\MainFeaturedPost.tsx",[],"D:\\Шарага\\Курсачи\\Blog\\client\\src\\components\\Main.tsx",["118","119"],"import { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport Markdown from './Markdown';\nimport FeaturedPost from \"./FeaturedPost\";\nimport React from \"react\";\n\nconst useStyles = makeStyles((theme) => ({\n  markdown: {\n    ...theme.typography.body2,\n    padding: theme.spacing(3, 0),\n  },\n}));\n\ninterface Props {\n    posts: Array<any>;\n    title: string;\n}\n\nexport default function Main(props: Props) {\n  const classes = useStyles();\n  const { posts, title } = props;\n\n  return (\n    <Grid item xs={12} md={8}>\n      <Typography variant=\"h6\" gutterBottom>\n        {title}\n      </Typography>\n      <Divider />\n      {\n          posts.map((post) => { return <FeaturedPost key={post.title} post={post} />;})\n      }\n    </Grid>\n  );\n}","D:\\Шарага\\Курсачи\\Blog\\client\\src\\components\\Header.tsx",["120","121","122"],"import { makeStyles } from '@material-ui/core/styles';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {changeViewPostState, init, loginDialogState, openAdminPanelStatus} from \"../actions\";\nimport {BlogStore} from \"../types\";\nimport React from \"react\";\n\nconst useStyles = makeStyles((theme) => ({\n  toolbar: {\n    borderBottom: `1px solid ${theme.palette.divider}`,\n  },\n  toolbarTitle: {\n    flex: 1,\n  },\n  toolbarSecondary: {\n    justifyContent: 'space-between',\n    overflowX: 'auto',\n  },\n  toolbarLink: {\n    padding: theme.spacing(1),\n    flexShrink: 0,\n  },\n}));\n\ninterface Props {\n  sections: Array<string>;\n  title: string;\n  onClickCategory?: (category: string) => void;\n}\n\nexport default function Header(props: Props) {\n  const classes = useStyles();\n  const { sections, title, onClickCategory } = props;\n  const {isOpenAdminPanel, isAuthed, openPostState} = useSelector((store: BlogStore) => store);\n  const {isOpenPost} = openPostState;\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <Toolbar className={classes.toolbar}>\n        {(isOpenAdminPanel && isAuthed) || isOpenPost ? <Button onClick={() => {\n          if (isOpenPost) {\n            dispatch(changeViewPostState({state: false}));\n          }\n          else{\n            dispatch(openAdminPanelStatus(false));\n            dispatch(init.request());\n          }\n          }}  size=\"small\">Назад</Button> : null}\n        <Typography\n          component=\"h2\"\n          variant=\"h5\"\n          color=\"inherit\"\n          align=\"center\"\n          noWrap\n          className={classes.toolbarTitle}\n        >\n          {title}\n        </Typography>\n        {!isOpenAdminPanel ? <Button variant=\"outlined\" size=\"small\" onClick={() => {\n          if (isAuthed && !isOpenAdminPanel) {\n            dispatch(openAdminPanelStatus(true))\n          }\n          else{\n            dispatch(loginDialogState(true));\n          }\n        }}>Войти</Button>: null}\n      </Toolbar>\n      <Toolbar component=\"nav\" variant=\"dense\" className={classes.toolbarSecondary}>\n        {sections.map((section) => (\n          <Button\n            color=\"inherit\"\n            key={section}\n            className={classes.toolbarLink}\n            onClick={() => {\n                if (isOpenAdminPanel && isAuthed) {\n                }\n                else {\n                  if (onClickCategory){\n                    onClickCategory(section);\n                  }\n                }\n            }}\n          >\n            {section}\n          </Button>\n        ))}\n      </Toolbar>\n    </>\n  );\n}","D:\\Шарага\\Курсачи\\Blog\\client\\src\\components\\FeaturedPost.tsx",[],"D:\\Шарага\\Курсачи\\Blog\\client\\src\\components\\Footer.tsx",[],"D:\\Шарага\\Курсачи\\Blog\\client\\src\\components\\Markdown.tsx",[],["123","124"],"D:\\Шарага\\Курсачи\\Blog\\client\\src\\index.tsx",["125"],"import React, {useRef} from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {store} from \"./redux\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App/>\n      </Provider>,\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n","D:\\Шарага\\Курсачи\\Blog\\client\\src\\redux.ts",[],"D:\\Шарага\\Курсачи\\Blog\\client\\src\\sagas.ts",[],"D:\\Шарага\\Курсачи\\Blog\\client\\src\\reducer.ts",["126"],"import {Actions, AdminOpenType, BlogStore, Post} from \"./types\";\r\nimport {Reducer} from \"redux\";\r\nimport {getType} from \"typesafe-actions\";\r\nimport {\r\n    addPost,\r\n    auth,\r\n    deletePost,\r\n    editPost,\r\n    fetchCategories,\r\n    init,\r\n    loginDialogState, openAdminPanelStatus, changeViewPostState,\r\n    toggleOnAddPostState,\r\n    toggleOnEditState\r\n} from \"./actions\";\r\n\r\nconst initialState: BlogStore = {\r\n    categories: [],\r\n    posts: [],\r\n    isOpenLogin: false,\r\n    isAuthed: false,\r\n    isOpenAdminPanel: false,\r\n    updatesCount: 0,\r\n    adminTabState: {\r\n        openType: AdminOpenType.ADD,\r\n    },\r\n    openPostState: {\r\n        isOpenPost: false,\r\n    }\r\n}\r\n\r\nexport const BlogReducer: Reducer<BlogStore, Actions> = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case getType(init.success):\r\n            return {...state, ...action.payload};\r\n        case getType(loginDialogState):\r\n            return {...state, isOpenLogin: action.payload};\r\n        case getType(auth.success):\r\n            return {...state, isOpenLogin: false, isAuthed: action.payload, isOpenAdminPanel: true};\r\n        case getType(openAdminPanelStatus):\r\n            return {...state, isOpenAdminPanel: action.payload};\r\n        case getType(changeViewPostState):\r\n            return {...state, openPostState: {isOpenPost: action.payload.state, currentPost: action.payload.post}};\r\n        case getType(editPost.success):\r\n        case getType(deletePost.success):\r\n        case getType(addPost.success):\r\n            return {...state, updatesCount: state.updatesCount + 1};\r\n        case getType(fetchCategories.success):\r\n            return {...state, categories: action.payload};\r\n        case getType(toggleOnEditState):\r\n            return {...state, adminTabState: {...state.adminTabState, openType: AdminOpenType.EDIT, selectedPost: action.payload}};\r\n        case getType(toggleOnAddPostState):\r\n            return {...state, adminTabState: {...state.adminTabState, openType: AdminOpenType.ADD, selectedPost: {\r\n                        postId: '',\r\n                        title: '',\r\n                        description: '',\r\n                        image: '',\r\n                        imageText: '',\r\n                        featured: false\r\n                    }}};\r\n        default:\r\n            return state;\r\n    }\r\n}","D:\\Шарага\\Курсачи\\Blog\\client\\src\\actions.ts",[],"D:\\Шарага\\Курсачи\\Blog\\client\\src\\api.ts",[],"D:\\Шарага\\Курсачи\\Blog\\client\\src\\utils.ts",[],"D:\\Шарага\\Курсачи\\Blog\\client\\src\\urls.ts",[],"D:\\Шарага\\Курсачи\\Blog\\client\\src\\config.ts",[],"D:\\Шарага\\Курсачи\\Blog\\client\\src\\components\\Login.tsx",[],"D:\\Шарага\\Курсачи\\Blog\\client\\src\\components\\AdminPanel.js",["127","128","129","130"],"import { makeStyles } from '@material-ui/core/styles';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport React, {useCallback, useEffect, useMemo} from \"react\";\r\nimport ServerTable from 'react-strap-table';\r\nimport {ROOT_URL} from \"../config\";\r\nimport {GET_POSTS_URL} from \"../urls\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport {deletePost, toggleOnEditState} from \"../actions\";\r\nimport PostsEditorForm from \"./PostsEditorForm\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    toolbar: {\r\n        borderBottom: `1px solid ${theme.palette.divider}`,\r\n    },\r\n    toolbarTitle: {\r\n        flex: 1,\r\n    },\r\n    toolbarSecondary: {\r\n        justifyContent: 'space-between',\r\n        overflowX: 'auto',\r\n    },\r\n    toolbarLink: {\r\n        padding: theme.spacing(1),\r\n        flexShrink: 0,\r\n    },\r\n}));\r\n\r\nexport const AdminPanel = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const {updatesCount} = useSelector((store) => store);\r\n    const [selectedRowID, setSelectedRowID] = React.useState(false);\r\n\r\n    const url = useMemo(() => {\r\n        return `${ROOT_URL}${GET_POSTS_URL}`;\r\n    }, []);\r\n\r\n    const columns = useMemo(() => ['postId', 'title', 'image', 'date', 'description', 'actions'], []);\r\n    const serverTable = useMemo(() => React.createRef(), []);\r\n\r\n    const options = {\r\n        perPage: 5,\r\n        sortable: ['postId', 'title', 'date'],\r\n        columnsAlign: {postId: 'center', title: 'center', image: 'center', date: 'center',description: 'center'},\r\n        responseAdapter: function (resp_data) {\r\n            return {data: resp_data, total: resp_data.length}\r\n        },\r\n        icons: {\r\n            sortUp: 'fa fa-sort-up',\r\n            sortDown: 'fa fa-sort-down'\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        serverTable.current.refreshData();\r\n    }, [updatesCount])\r\n\r\n    const onEdit = useCallback((row) => {\r\n        const tmp = {...row};\r\n        tmp.featured = tmp.featured === 1;\r\n        dispatch(toggleOnEditState(tmp));\r\n    }, [])\r\n\r\n    const onDelete = useCallback((postId) => {\r\n        dispatch(deletePost.request(postId));\r\n    }, [dispatch, deletePost.request])\r\n\r\n\r\n    return (\r\n        <>\r\n            <ServerTable\r\n                columns={columns}\r\n                url={url}\r\n                ref={serverTable}\r\n                pagination={false}\r\n                options={options}\r\n                bordered hover\r\n            >\r\n                {\r\n                    function (row, column) {\r\n                        switch (column) {\r\n                            case 'image':\r\n                                return (<img height={100} width={150} src={row.image}  className=\"table-image\"/>);\r\n                            case 'date':\r\n                                return row[column] ? row[column] : 'Не заполнено';\r\n                            case 'actions':\r\n                                return (\r\n                                    <div style={{textAlign: 'center'}}>\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            style={{margin: '10px'}}\r\n                                            className={classes.button}\r\n                                            endIcon={<EditIcon/>}\r\n                                            onClick={() => {\r\n                                                onEdit(row);\r\n                                            }}\r\n                                        >\r\n                                            Edit\r\n                                        </Button>\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            color=\"secondary\"\r\n                                            style={{margin: '10px', position: 'absolute'}}\r\n                                            onClick={() => {\r\n                                                setSelectedRowID(row.postId);\r\n                                                setOpen(true);\r\n                                            }}\r\n                                            startIcon={<DeleteIcon />}\r\n                                        >\r\n                                            Delete\r\n                                        </Button>\r\n                                    </div>\r\n                                );\r\n                            default:\r\n                                return (row[column]);\r\n                        }\r\n                    }\r\n                }\r\n            </ServerTable>\r\n            <PostsEditorForm/>\r\n            <div>\r\n                <Dialog\r\n                    open={open}\r\n                    keepMounted\r\n                    onClose={() => {setOpen(false)}}\r\n                    aria-labelledby=\"alert-dialog-slide-title\"\r\n                    aria-describedby=\"alert-dialog-slide-description\"\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-slide-title\">{\"Подтверждение\"}</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText id=\"alert-dialog-slide-description\">\r\n                            Вы действительно хотите удалить этот пост?\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => {setOpen(false)}} color=\"primary\">\r\n                            Нет\r\n                        </Button>\r\n                        <Button onClick={() => {setOpen(false); onDelete(selectedRowID)}} color=\"primary\">\r\n                            Да\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","D:\\Шарага\\Курсачи\\Blog\\client\\src\\types.ts",[],"D:\\Шарага\\Курсачи\\Blog\\client\\src\\components\\PostsEditorForm.tsx",["131","132","133","134"],"import {makeStyles} from '@material-ui/core/styles';\r\nimport Form from \"@rjsf/material-ui\";\r\nimport {JSONSchema7} from \"json-schema\";\r\nimport React, {useCallback, useMemo} from \"react\";\r\nimport {Button, Paper} from \"@material-ui/core\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AdminOpenType, BlogStore, Post} from \"../types\";\r\nimport {addPost, editPost, toggleOnAddPostState} from \"../actions\";\r\n\r\nconst useStyles = makeStyles({\r\n    rootForm: {\r\n        padding: '20px'\r\n    },\r\n    paper: {\r\n        margin: '55px ​0 20px 0 !important'\r\n    }\r\n});\r\n\r\ninterface Props {\r\n    postId: string;\r\n    title: string;\r\n    description: string;\r\n    image: string;\r\n    imageText: string;\r\n    featured: boolean;\r\n    linkText?: string;\r\n    date?: string;\r\n    category?: string;\r\n}\r\n\r\nexport default function PostsEditorForm(props: Props) {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const {categories, adminTabState} = useSelector((store: BlogStore) => store);\r\n    const {openType, selectedPost} = adminTabState;\r\n\r\n    const getProperty = useCallback((name: keyof Post, isBoolean: boolean = false) => {\r\n        if (openType == AdminOpenType.EDIT && selectedPost) {\r\n            return selectedPost[name];\r\n        }\r\n        return isBoolean ? false : \"\";\r\n    }, [openType, selectedPost]);\r\n\r\n    const schema = useMemo(() => {\r\n        const baseSchema: JSONSchema7 = {\r\n            title: openType == AdminOpenType.EDIT ? \"Изменение поста\" : \"Добавление нового поста\",\r\n            type: \"object\",\r\n            required: ['title', 'description', 'image', 'featured'],\r\n            properties: {\r\n                title: {type: \"string\", title: \"Заголовок\", default: getProperty('title')},\r\n                description: {type: \"string\", title: \"Описание\", default: getProperty('description')},\r\n                image: {type: \"string\", title: \"Ссылка на изображение\", default: \"\"},\r\n                imageText: {type: \"string\", title: \"Подпись к изображению\", default: getProperty('imageText')},\r\n                linkText: {type: \"string\", title: \"Текст ссылки\", default: getProperty('linkText')},\r\n                category: {type: \"string\", title: \"Категория\", enum: categories ,default: getProperty('category')},\r\n                featured: {type: \"boolean\", title: \"Это фичерный пост? (отображается на главной странице, в большом блоке)\", default: 0}\r\n            }\r\n        };\r\n        return baseSchema;\r\n    }, [categories, openType]);\r\n\r\n    const formData = useMemo(() => {\r\n        if (selectedPost) {\r\n            return selectedPost;\r\n        }\r\n        else {\r\n            return {\r\n                postId: '',\r\n                title: '',\r\n                description: '',\r\n                image: '',\r\n                imageText: '',\r\n                featured: false\r\n            }\r\n        }\r\n    }, [selectedPost]);\r\n\r\n    return (\r\n        <Paper className={classes.paper}>\r\n            <Button variant=\"contained\" color=\"primary\" href=\"#contained-buttons\" onClick={() => {dispatch(toggleOnAddPostState());}}>\r\n                Добавить новый пост\r\n            </Button>\r\n            <Form schema={schema}  formData={formData} className={classes.rootForm} onSubmit={(e) => {\r\n                if (openType == AdminOpenType.EDIT) {\r\n                    dispatch(editPost.request(e.formData));\r\n                    dispatch(toggleOnAddPostState());\r\n                }\r\n                else  {\r\n                    dispatch(addPost.request(e.formData))\r\n                    dispatch(toggleOnAddPostState());\r\n                }\r\n            }}/>\r\n\r\n        </Paper>\r\n    );\r\n}\r\n","D:\\Шарага\\Курсачи\\Blog\\client\\src\\components\\PostViewer.tsx",["135","136"],"import { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport {Post} from \"../types\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        display: 'flex',\r\n    },\r\n    cardDetails: {\r\n        flex: 1,\r\n    },\r\n    cardMedia: {\r\n        width: '100%',\r\n        height: '35%'\r\n    }\r\n});\r\n\r\ninterface Props {\r\n    post?: Post;\r\n}\r\n\r\nexport default function PostViewer(props: Props) {\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n    const {post} = props;\r\n\r\n    return (\r\n        <>\r\n        {\r\n            post ?\r\n                <Card className={classes.card}>\r\n                    <div className={classes.cardDetails}>\r\n                        <CardContent>\r\n                            <Typography component=\"h2\" variant=\"h3\">\r\n                                {post.title}\r\n                            </Typography>\r\n                            <img className={classes.cardMedia} src={post.image} alt={post.imageText}/>\r\n                            <Typography variant=\"subtitle1\" paragraph>\r\n                                {post.description}\r\n                            </Typography>\r\n                        </CardContent>\r\n                    </div>\r\n                </Card> : null\r\n        }\r\n        </>\r\n    );\r\n}\r\n",{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","severity":1,"message":"142","line":12,"column":5,"nodeType":"143","endLine":12,"endColumn":29,"suggestions":"144"},{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","replacedBy":"140"},{"ruleId":"145","severity":1,"message":"146","line":13,"column":35,"nodeType":"147","messageId":"148","endLine":13,"endColumn":39},{"ruleId":"149","severity":1,"message":"150","line":21,"column":11,"nodeType":"147","messageId":"148","endLine":21,"endColumn":19},{"ruleId":"145","severity":1,"message":"151","line":5,"column":8,"nodeType":"147","messageId":"148","endLine":5,"endColumn":16},{"ruleId":"145","severity":1,"message":"152","line":22,"column":9,"nodeType":"147","messageId":"148","endLine":22,"endColumn":16},{"ruleId":"145","severity":1,"message":"153","line":4,"column":8,"nodeType":"147","messageId":"148","endLine":4,"endColumn":18},{"ruleId":"145","severity":1,"message":"154","line":5,"column":8,"nodeType":"147","messageId":"148","endLine":5,"endColumn":18},{"ruleId":"145","severity":1,"message":"155","line":7,"column":8,"nodeType":"147","messageId":"148","endLine":7,"endColumn":12},{"ruleId":"137","replacedBy":"156"},{"ruleId":"139","replacedBy":"157"},{"ruleId":"145","severity":1,"message":"158","line":1,"column":16,"nodeType":"147","messageId":"148","endLine":1,"endColumn":22},{"ruleId":"145","severity":1,"message":"146","line":1,"column":44,"nodeType":"147","messageId":"148","endLine":1,"endColumn":48},{"ruleId":"141","severity":1,"message":"159","line":66,"column":8,"nodeType":"143","endLine":66,"endColumn":22,"suggestions":"160"},{"ruleId":"141","severity":1,"message":"161","line":72,"column":8,"nodeType":"143","endLine":72,"endColumn":10,"suggestions":"162"},{"ruleId":"141","severity":1,"message":"163","line":76,"column":8,"nodeType":"143","endLine":76,"endColumn":38,"suggestions":"164"},{"ruleId":"165","severity":1,"message":"166","line":93,"column":41,"nodeType":"167","endLine":93,"endColumn":113},{"ruleId":"168","severity":1,"message":"169","line":38,"column":22,"nodeType":"170","messageId":"171","endLine":38,"endColumn":24},{"ruleId":"168","severity":1,"message":"169","line":46,"column":29,"nodeType":"170","messageId":"171","endLine":46,"endColumn":31},{"ruleId":"141","severity":1,"message":"172","line":60,"column":8,"nodeType":"143","endLine":60,"endColumn":30,"suggestions":"173"},{"ruleId":"168","severity":1,"message":"169","line":84,"column":30,"nodeType":"170","messageId":"171","endLine":84,"endColumn":32},{"ruleId":"145","severity":1,"message":"174","line":5,"column":8,"nodeType":"147","messageId":"148","endLine":5,"endColumn":17},{"ruleId":"145","severity":1,"message":"175","line":27,"column":11,"nodeType":"147","messageId":"148","endLine":27,"endColumn":19},"no-native-reassign",["176"],"no-negated-in-lhs",["177"],"react-hooks/exhaustive-deps","React Hook useEffect has an unnecessary dependency: 'init.request'. Either exclude it or remove the dependency array. Outer scope values like 'init.request' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["178"],"@typescript-eslint/no-unused-vars","'Post' is defined but never used.","Identifier","unusedVar","no-unused-vars","'archives' is assigned a value but never used.","'Markdown' is defined but never used.","'classes' is assigned a value but never used.","'IconButton' is defined but never used.","'SearchIcon' is defined but never used.","'Link' is defined but never used.",["176"],["177"],"'useRef' is defined but never used.","React Hook useEffect has a missing dependency: 'serverTable'. Either include it or remove the dependency array.",["179"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["180"],"React Hook useCallback has an unnecessary dependency: 'deletePost.request'. Either exclude it or remove the dependency array. Outer scope values like 'deletePost.request' aren't valid dependencies because mutating them doesn't re-render the component.",["181"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useMemo has a missing dependency: 'getProperty'. Either include it or remove the dependency array.",["182"],"'CardMedia' is defined but never used.","'dispatch' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"183","fix":"184"},{"desc":"185","fix":"186"},{"desc":"183","fix":"187"},{"desc":"183","fix":"188"},{"desc":"189","fix":"190"},"Update the dependencies array to be: [dispatch]",{"range":"191","text":"192"},"Update the dependencies array to be: [serverTable, updatesCount]",{"range":"193","text":"194"},{"range":"195","text":"192"},{"range":"196","text":"192"},"Update the dependencies array to be: [categories, getProperty, openType]",{"range":"197","text":"198"},[278,302],"[dispatch]",[2313,2327],"[serverTable, updatesCount]",[2500,2502],[2609,2639],[2470,2492],"[categories, getProperty, openType]"]